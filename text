"use client";
import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Package,
  Search,
  Filter,
  Eye,
  TrendingUp,
  Clock,
  CheckCircle,
  Truck,
  XCircle,
  Receipt,
  ArrowUpDown,
  Download,
} from "lucide-react";
import { type OrderData, ORDERSTATUS } from "@/types/order";
import { GetOrders } from "@/hooks/order/useReadOrder";



interface OrdersPageProps {
  onOrderClick: (orderId: string) => void;
}

export function OrdersPage({ onOrderClick }: OrdersPageProps) {
  const [orders, setOrders] = useState<OrderData[]>()
  const [filteredOrders, setFilteredOrders] = useState<OrderData[]>()
  const [searchTerm, setSearchTerm] = useState("")
  const [statusFilter, setStatusFilter] = useState<string>("all")
  const [sortBy, setSortBy] = useState<"date" | "amount" | "status">("date")
  const [sortOrder, setSortOrder] = useState<"asc" | "desc">("desc")

  useEffect(() => {
    const filtered = orders.filter((order) => {
      const matchesSearch =
        order.order_num.toLowerCase().includes(searchTerm.toLowerCase()) ||
        order.customer_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        order.customer_email?.toLowerCase().includes(searchTerm.toLowerCase())

      const matchesStatus = statusFilter === "all" || order.status === statusFilter

      return matchesSearch && matchesStatus
    })

    // Sort orders
    filtered.sort((a, b) => {
      let comparison = 0
      switch (sortBy) {
        case "date":
          comparison = new Date(a.created_at || "").getTime() - new Date(b.created_at || "").getTime()
          break
        case "amount":
          comparison = a.total_amount - b.total_amount
          break
        case "status":
          comparison = a.status.localeCompare(b.status)
          break
      }
      return sortOrder === "asc" ? comparison : -comparison
    })

    setFilteredOrders(filtered)
  }, [orders, searchTerm, statusFilter, sortBy, sortOrder])

  const getStatusIcon = (status: ORDERSTATUS) => {
    switch (status) {
      case ORDERSTATUS.PENDING:
        return <Clock className="h-4 w-4" />
      case ORDERSTATUS.CONFIRMED:
        return <CheckCircle className="h-4 w-4" />
      case ORDERSTATUS.PROCESSING:
        return <Package className="h-4 w-4" />
      case ORDERSTATUS.SHIPPED:
        return <Truck className="h-4 w-4" />
      case ORDERSTATUS.DELIVERED:
        return <CheckCircle className="h-4 w-4" />
      case ORDERSTATUS.CANCELLED:
        return <XCircle className="h-4 w-4" />
      default:
        return <Clock className="h-4 w-4" />
    }
  }

  const getStatusColor = (status: ORDERSTATUS) => {
    switch (status) {
      case ORDERSTATUS.PENDING:
        return "bg-amber-100 text-amber-800 border-amber-200"
      case ORDERSTATUS.CONFIRMED:
        return "bg-blue-100 text-blue-800 border-blue-200"
      case ORDERSTATUS.PROCESSING:
        return "bg-purple-100 text-purple-800 border-purple-200"
      case ORDERSTATUS.SHIPPED:
        return "bg-indigo-100 text-indigo-800 border-indigo-200"
      case ORDERSTATUS.DELIVERED:
        return "bg-green-100 text-green-800 border-green-200"
      case ORDERSTATUS.CANCELLED:
        return "bg-red-100 text-red-800 border-red-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    })
  }

  const totalOrders = orders.length
  const totalRevenue = orders.reduce((sum, order) => sum + order.total_amount, 0)
  const deliveredOrders = orders.filter((order) => order.status === ORDERSTATUS.DELIVERED).length

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-emerald-50/30 to-teal-50/50 relative overflow-hidden">
      {/* Enhanced Background Elements */}
      <div className="absolute inset-0">
        <div className="absolute top-20 left-10 w-96 h-96 bg-gradient-to-r from-emerald-200/30 to-teal-200/30 rounded-full blur-3xl animate-pulse" />
        <div className="absolute bottom-20 right-10 w-80 h-80 bg-gradient-to-r from-teal-200/30 to-emerald-200/30 rounded-full blur-3xl animate-pulse delay-1000" />
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-64 h-64 bg-gradient-to-r from-purple-200/20 to-pink-200/20 rounded-full blur-3xl animate-pulse delay-500" />

        {/* Floating particles */}
        {[...Array(15)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-2 h-2 bg-gradient-to-r from-emerald-400 to-teal-400 rounded-full opacity-20"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
            }}
            animate={{
              y: [0, -20, 0],
              opacity: [0.2, 0.5, 0.2],
            }}
            transition={{
              duration: 3 + Math.random() * 2,
              repeat: Number.POSITIVE_INFINITY,
              delay: Math.random() * 2,
            }}
          />
        ))}
      </div>

      <div className="container mx-auto px-4 py-8 relative z-10">
        {/* Enhanced Header */}
        <motion.div
          initial={{ opacity: 0, y: -50 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, type: "spring", stiffness: 100 }}
          className="text-center mb-12"
        >
          <div className="inline-flex items-center gap-3 bg-gradient-to-r from-emerald-100 via-teal-100 to-emerald-100 rounded-full px-8 py-4 mb-8 shadow-xl border border-emerald-200/50">
            <motion.div
              animate={{ rotate: 360 }}
              transition={{ duration: 20, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
            >
              <Receipt className="w-6 h-6 text-emerald-600" />
            </motion.div>
            <span className="font-bold text-emerald-700 text-lg">Order Management</span>
            <Crown className="w-6 h-6 text-emerald-600" />
          </div>

          <motion.h1
            className="text-5xl lg:text-6xl font-black bg-gradient-to-r from-slate-800 via-emerald-700 via-teal-600 to-purple-600 bg-clip-text text-transparent mb-6"
            initial={{ scale: 0.5 }}
            animate={{ scale: 1 }}
            transition={{ duration: 0.8, type: "spring", stiffness: 120 }}
          >
            Orders Dashboard
          </motion.h1>

          <motion.p
            className="text-xl lg:text-2xl text-slate-600 max-w-3xl mx-auto leading-relaxed"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.3, duration: 0.8 }}
          >
            Track and manage all your orders in one beautiful place
          </motion.p>

          <div className="flex items-center justify-center mt-8 space-x-8">
            <motion.div className="flex items-center space-x-2 text-emerald-600" whileHover={{ scale: 1.05 }}>
              <Zap className="h-5 w-5" />
              <span className="font-semibold">Real-time Updates</span>
            </motion.div>
            <motion.div className="flex items-center space-x-2 text-teal-600" whileHover={{ scale: 1.05 }}>
              <Target className="h-5 w-5" />
              <span className="font-semibold">Smart Filtering</span>
            </motion.div>
            <motion.div className="flex items-center space-x-2 text-purple-600" whileHover={{ scale: 1.05 }}>
              <Award className="h-5 w-5" />
              <span className="font-semibold">Advanced Analytics</span>
            </motion.div>
          </div>
        </motion.div>

        {/* Enhanced Stats Cards */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1, duration: 0.8 }}
          className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-12"
        >
          <motion.div whileHover={{ scale: 1.05, rotateY: 5 }} transition={{ type: "spring", stiffness: 300 }}>
            <Card className="bg-gradient-to-br from-emerald-500 via-emerald-600 to-teal-600 border-0 shadow-2xl overflow-hidden relative">
              <div className="absolute inset-0 bg-gradient-to-br from-white/20 to-transparent" />
              <div className="absolute top-4 right-4">
                <motion.div
                  animate={{ rotate: [0, 10, -10, 0] }}
                  transition={{ duration: 2, repeat: Number.POSITIVE_INFINITY }}
                >
                  <Package className="h-8 w-8 text-white/80" />
                </motion.div>
              </div>
              <CardContent className="p-8 relative z-10">
                <div className="flex items-center space-x-4 mb-4">
                  <div className="w-16 h-16 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center">
                    <Package className="h-8 w-8 text-white" />
                  </div>
                  <div>
                    <p className="text-emerald-100 font-medium">Total Orders</p>
                    <p className="text-3xl font-black text-white">{totalOrders}</p>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <TrendingUp className="h-4 w-4 text-green-200" />
                  <span className="text-green-200 font-semibold">Growing</span>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div whileHover={{ scale: 1.05, rotateY: 5 }} transition={{ type: "spring", stiffness: 300 }}>
            <Card className="bg-gradient-to-br from-blue-500 via-indigo-600 to-purple-600 border-0 shadow-2xl overflow-hidden relative">
              <div className="absolute inset-0 bg-gradient-to-br from-white/20 to-transparent" />
              <div className="absolute top-4 right-4">
                <motion.div
                  animate={{ scale: [1, 1.1, 1] }}
                  transition={{ duration: 2, repeat: Number.POSITIVE_INFINITY }}
                >
                  <TrendingUp className="h-8 w-8 text-white/80" />
                </motion.div>
              </div>
              <CardContent className="p-8 relative z-10">
                <div className="flex items-center space-x-4 mb-4">
                  <div className="w-16 h-16 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center">
                    <TrendingUp className="h-8 w-8 text-white" />
                  </div>
                  <div>
                    <p className="text-blue-100 font-medium">Total Revenue</p>
                    <p className="text-3xl font-black text-white">Rs {totalRevenue.toFixed(2)}</p>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <TrendingUp className="h-4 w-4 text-green-200" />
                  <span className="text-green-200 font-semibold">+12.5%</span>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div whileHover={{ scale: 1.05, rotateY: 5 }} transition={{ type: "spring", stiffness: 300 }}>
            <Card className="bg-gradient-to-br from-purple-500 via-pink-600 to-rose-600 border-0 shadow-2xl overflow-hidden relative">
              <div className="absolute inset-0 bg-gradient-to-br from-white/20 to-transparent" />
              <div className="absolute top-4 right-4">
                <motion.div
                  animate={{ rotate: 360 }}
                  transition={{ duration: 8, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
                >
                  <CheckCircle className="h-8 w-8 text-white/80" />
                </motion.div>
              </div>
              <CardContent className="p-8 relative z-10">
                <div className="flex items-center space-x-4 mb-4">
                  <div className="w-16 h-16 bg-white/20 backdrop-blur-sm rounded-2xl flex items-center justify-center">
                    <CheckCircle className="h-8 w-8 text-white" />
                  </div>
                  <div>
                    <p className="text-purple-100 font-medium">Delivered</p>
                    <p className="text-3xl font-black text-white">{deliveredOrders}</p>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <CheckCircle className="h-4 w-4 text-green-200" />
                  <span className="text-green-200 font-semibold">Excellent</span>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </motion.div>

        {/* Filters and Search */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="mb-8"
        >
          <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-xl">
            <CardContent className="p-6">
              <div className="flex flex-col lg:flex-row gap-4 items-center">
                <div className="relative flex-1">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400" />
                  <Input
                    placeholder="Search by order number, customer name, or email..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10 h-12 bg-white/80 border-emerald-200 focus:border-emerald-500 rounded-xl"
                  />
                </div>

                <div className="flex gap-4">
                  <Select value={statusFilter} onValueChange={setStatusFilter}>
                    <SelectTrigger className="w-48 h-12 bg-white/80 border-emerald-200 focus:border-emerald-500 rounded-xl">
                      <Filter className="h-4 w-4 mr-2" />
                      <SelectValue placeholder="Filter by status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Status</SelectItem>
                      {Object.values(ORDERSTATUS).map((status) => (
                        <SelectItem key={status} value={status}>
                          {status.charAt(0) + status.slice(1).toLowerCase()}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>

                  <Button
                    variant="outline"
                    onClick={() => setSortOrder(sortOrder === "asc" ? "desc" : "asc")}
                    className="h-12 px-4 border-emerald-200 hover:bg-emerald-50 rounded-xl"
                  >
                    <ArrowUpDown className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Orders Table */}
        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.3 }}>
          <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-xl overflow-hidden">
            <CardHeader className="bg-gradient-to-r from-emerald-600 to-teal-600 text-white p-6">
              <CardTitle className="flex items-center justify-between">
                <span className="flex items-center">
                  <Package className="h-5 w-5 mr-2" />
                  Orders ({filteredOrders.length})
                </span>
                <Button
                  variant="secondary"
                  size="sm"
                  className="bg-white/20 hover:bg-white/30 text-white border-white/30"
                >
                  <Download className="h-4 w-4 mr-2" />
                  Export
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-0">
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow className="border-emerald-100">
                      <TableHead className="font-semibold text-slate-700">Order Number</TableHead>
                      <TableHead className="font-semibold text-slate-700">Customer</TableHead>
                      <TableHead className="font-semibold text-slate-700">Date</TableHead>
                      <TableHead className="font-semibold text-slate-700">Amount</TableHead>
                      <TableHead className="font-semibold text-slate-700">Status</TableHead>
                      <TableHead className="font-semibold text-slate-700">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    <AnimatePresence>
                      {filteredOrders.map((order, index) => (
                        <motion.tr
                          key={order.id}
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          exit={{ opacity: 0, y: -20 }}
                          transition={{ delay: index * 0.05 }}
                          className="border-emerald-50 hover:bg-emerald-50/50 cursor-pointer transition-all duration-200"
                          onClick={() => onOrderClick(order.id)}
                        >
                          <TableCell className="font-mono font-semibold text-emerald-600">{order.order_num}</TableCell>
                          <TableCell>
                            <div>
                              <p className="font-medium text-slate-900">{order.customer_name}</p>
                              <p className="text-sm text-slate-500">{order.customer_email}</p>
                            </div>
                          </TableCell>
                          <TableCell className="text-slate-600">
                            {order.created_at && formatDate(order.created_at)}
                          </TableCell>
                          <TableCell className="font-bold text-slate-900">Rs {order.total_amount.toFixed(2)}</TableCell>
                          <TableCell>
                            <Badge className={`${getStatusColor(order.status)} border font-medium`}>
                              <span className="flex items-center gap-1">
                                {getStatusIcon(order.status)}
                                {order.status.charAt(0) + order.status.slice(1).toLowerCase()}
                              </span>
                            </Badge>
                          </TableCell>
                          <TableCell>
                            <Button
                              size="sm"
                              variant="ghost"
                              className="text-emerald-600 hover:text-emerald-700 hover:bg-emerald-50"
                              onClick={(e) => {
                                e.stopPropagation()
                                onOrderClick(order.id)
                              }}
                            >
                              <Eye className="h-4 w-4 mr-1" />
                              View
                            </Button>
                          </TableCell>
                        </motion.tr>
                      ))}
                    </AnimatePresence>
                  </TableBody>
                </Table>
              </div>

              {filteredOrders.length === 0 && (
                <div className="text-center py-12">
                  <Package className="h-12 w-12 text-slate-400 mx-auto mb-4" />
                  <h3 className="text-lg font-semibold text-slate-900 mb-2">No orders found</h3>
                  <p className="text-slate-600">Try adjusting your search or filter criteria</p>
                </div>
              )}
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </div>
  )
}
